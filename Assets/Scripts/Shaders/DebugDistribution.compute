/////////////////////////
////DISTRIBUTE POINTS////
/////////////////////////

#pragma kernel Distribute
#pragma kernel Evaluate
#pragma kernel DetermineCount
#include "ParallaxLib.cginc"


RWStructuredBuffer<int> Triangles;         //Local space
RWStructuredBuffer<float3> Vertices;        //Local space
//RWStructuredBuffer<float3> Normals;         //Local space
//RWStructuredBuffer<float> Noise;
//RWStructuredBuffer<float> Distribution;
AppendStructuredBuffer<PositionData> Positions;

int _PopulationMultiplier;
int _MaxCount;
float _Seed;
float4x4 _ObjectToWorldMatrix;

uint _NumTris;

[numthreads(32,1,1)]
void Distribute (uint3 id : SV_DispatchThreadID)
{
    if ((int)(id.x * _PopulationMultiplier) > _MaxCount - 1)     //Early return if the max count has been exceeded - Runs for each triangle and no more
    {
        return;
    }

    int index1 = Triangles[id.x * 3];      // Pass this to Evaluate for normal retrieval
    int index2 = Triangles[id.x * 3 + 1];
    int index3 = Triangles[id.x * 3 + 2];

    //if (id.x <= 52 || id.x % 52 == 0 || id.x % 52 == 1 || id.x % 52 == 51 || id.x % 52 == 50 || id.x > _NumTris - 53) { return; } // Ignore skirts in the terrain quads

    float3 vert1 = Vertices[index1];
    float3 vert2 = Vertices[index2];
    float3 vert3 = Vertices[index3];

    // norm1 = Normals[index1];
    //float3 norm2 = Normals[index2];
    //float3 norm3 = Normals[index3];

    //float normalDeviance = GetNormalDeviance(norm1, norm2, norm3);
    //if (normalDeviance < 1 - pow(_MaxNormalDeviance, 3))
    //{
    //    return;
    //}
    //
    //float avgDistribution = (Distribution[index1] + Distribution[index2] + Distribution[index3]) / 3;
    //if (avgDistribution < _BiomeCutoff)
    //{ 
    //    return;
    //}

    //float noise1 = Noise[index1] * Distribution[index1];
    //float noise2 = Noise[index2] * Distribution[index2];
    //float noise3 = Noise[index3] * Distribution[index3];
    //
    //float3 avgNrm = (norm1 + norm2 + norm3) / 3;            //Normal at triangle centre

    for (int i = 0; i < _PopulationMultiplier; i++)
    {
        float3 localPos = (vert1 + vert2 + vert3) / 3;

        PositionData output;
        output.pos = localPos;
        output.scale = float3(1,1,1);
        output.rot = 0;
        output.index = id.x * 3;

        Positions.Append(output);
    }
}

/////////////////////////
//////INDIRECT ARGS//////
/////////////////////////

RWStructuredBuffer<uint> DispatchArgs;
[numthreads(1,1,1)]
void DetermineCount(uint3 id : SV_DispatchThreadID)
{
    DispatchArgs[0] = (uint)ceil((float)(DispatchArgs[0]) / 32.0);
}

///////////////////////////////
/////EVALUATE POINTS (LOD)/////
///////////////////////////////

StructuredBuffer<PositionData> PositionsIn;
StructuredBuffer<uint> ObjectLimits;

AppendStructuredBuffer<TransformData> LOD0;
AppendStructuredBuffer<TransformData> LOD1;
AppendStructuredBuffer<TransformData> LOD2;

float3 _WorldSpaceCameraPosition;
float _Lod01Split;
float _Lod12Split;
float _MaxRange;
float _MaxEvaluateCount;

// Define cull radius as the radius before frustum culling can begin
// Define cull limit as the extents to the camera frustum before culling can begin (trees, for example, are tall. We want to be able to see any part of the tree without it disappearing)
float _CullRadius;
float _CullLimit;

// For retrieving the terrain normal, first pass an integer from Distribute which indicates which triangle this object came from (add 0, 1, 2 to get the indices)
// Then average the normals on that triangle to get the face normal and then transform the object accordingly

[numthreads(32,1,1)]
void Evaluate (uint3 id : SV_DispatchThreadID)
{
    if (id.x > ObjectLimits[0] - 1) { return; }

    PositionData pos = PositionsIn[id.x];
    float4 localPos = float4(pos.pos, 1);
    float3 worldPos = mul(_ObjectToWorldMatrix, localPos).xyz;

    // Frustum Culling
	float4 cd0 = CameraDistances0(worldPos);
    float4 cd1 = CameraDistances1(worldPos);
		
    float lodDist = distance(_WorldSpaceCameraPosition, worldPos) / _MaxRange;  //Percentage to max range

    if (!(all(cd0 >= _CullLimit) && all(cd1 >= _CullLimit)) && lodDist > _CullRadius)
    {
        return;
    }

    uint index1 = Triangles[pos.index];
    uint index2 = Triangles[pos.index + 1];
    uint index3 = Triangles[pos.index + 2];

    // Calculating the average normal using (nrm1 + nrm2 + nrm3) / 3 does not work, so compute face normal from vertex positions

    float3 vert1 = Vertices[index1];
    float3 vert2 = Vertices[index2];
    float3 vert3 = Vertices[index3];

    float3 avgNormal = normalize(cross(vert2 - vert1, vert3 - vert1));

    float4x4 mat = GetTRSMatrix(pos.pos, float3(0, pos.rot, 0), pos.scale, avgNormal);

    mat = mul(_ObjectToWorldMatrix, mat);

    TransformData object;
    object.mat = mat;

    // Sort by LOD then by cascade //
    if (lodDist > 1.0) { return; }
    if (lodDist > _Lod12Split)  //We are in LOD2
    {
        LOD2.Append(object);
        return;
    }
    if (lodDist > _Lod01Split)
    {
        LOD1.Append(object);
        return;
    }
    LOD0.Append(object);
}